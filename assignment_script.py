# -*- coding: utf-8 -*-
"""assignment_script

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X2WV3UFzQWv6JQ0S15DEQXyVa118yS57
"""

import pandas as pd
import pymc as pm
import numpy as np
import matplotlib.pyplot as plt
import arviz as az

data = pd.read_csv("https://raw.githubusercontent.com/dustywhite7/Econ8310/master/AssignmentData/cookie_cats.csv")
data

data.describe()
plt.boxplot(data['sum_gamerounds'])
#Something weird is going on with sum_gamerounds, appears to be outlier

# Removing extreme outlier
data = data[data.sum_gamerounds < data.sum_gamerounds.max()]
plt.boxplot(data['sum_gamerounds'])

# 1 Day retention observed
gate30_1day = data[data['version'] == 'gate_30']['retention_1']
gate40_1day = data[data['version'] == 'gate_40']['retention_1']

# Looking at probability of retention which will be in [0,1]. No other strong beliefs about distribution, using Uniform [0,1] as prior. Observations are successes n out of N, so using Bernoulli

# 1 Day retention model
with pm.Model() as model_1day:
    p_30_1 = pm.Uniform('p_30_1',lower=0, upper=1)
    p_40_1 = pm.Uniform('p_40_1',lower=0, upper=1)

    obs_30_1 = pm.Bernoulli('obs_30_1', p_30_1, observed = gate30_1day)
    obs_40_1 = pm.Bernoulli('obs_40_1', p_40_1, observed = gate40_1day)

    difference_1 = pm.Deterministic('difference_1', p_30_1 - p_40_1)


    step = pm.Metropolis()
    trace_1day = pm.sample(20000, step=step,chains=2)

# Graphing posterior distributions for p_30_1 and p_40_1

p_30_1_samples =  np.concatenate(trace_1day.posterior.p_30_1.data[:,1000:])
p_40_1_samples =  np.concatenate(trace_1day.posterior.p_40_1.data[:,1000:])

plt.figure(figsize=(12.5, 4))
plt.hist(p_30_1_samples, bins=40, label='Posterior p_30_1', density=True)
plt.hist(p_40_1_samples, bins=40, label='Posterior p_40_1', density=True)
plt.legend()
plt.show()

# Graphing posterior distributions for difference_1

difference_1_samples =  np.concatenate(trace_1day.posterior.difference_1.data[:,1000:])


plt.figure(figsize=(12.5, 4))
plt.hist(difference_1_samples, bins=40, label='Posterior difference_1', density=True)
plt.legend()
plt.show()

# Summary of 1 day model
results_1day = az.summary(trace_1day, hdi_prob=0.95)
print(results_1day)

# 7 Day retention observed
gate30_7day = data[data['version'] == 'gate_30']['retention_7']
gate40_7day = data[data['version'] == 'gate_40']['retention_7']

# Using same priors as 1 day retnetion model

with pm.Model() as model__7day:
    p_30_7 = pm.Uniform('p_30_7',lower=0, upper=1)
    p_40_7 = pm.Uniform('p_40_7',lower=0, upper=1)

    obs_30_7 = pm.Bernoulli('obs_30_7', p_30_7, observed = gate30_7day)
    obs_40_7 = pm.Bernoulli('obs_40_7', p_40_7, observed = gate40_7day)

    difference_7 = pm.Deterministic('difference_7', p_30_7 - p_40_7)


    step = pm.Metropolis()
    trace_7day = pm.sample(20000, step=step,chains=2)

# Graphing posterior distributions for p_30_7 and p_40_7

p_30_7_samples =  np.concatenate(trace_7day.posterior.p_30_7.data[:,1000:])
p_40_7_samples =  np.concatenate(trace_1day.posterior.p_40_1.data[:,1000:])

plt.figure(figsize=(12.5, 4))
plt.hist(p_30_7_samples, bins=40, label='Posterior p_30_7', density=True)
plt.hist(p_40_7_samples, bins=40, label='Posterior p_40_7', density=True)
plt.legend()
plt.show()

# Graphing posterior distribution for difference_7

difference_7_samples =  np.concatenate(trace_7day.posterior.difference_7.data[:,1000:])


plt.figure(figsize=(12.5, 4))
plt.hist(difference_7_samples, bins=40, label='Posterior difference_7', density=True)
plt.legend()
plt.show()

results_7day = az.summary(trace_7day, hdi_prob=0.95)
print(results_7day)